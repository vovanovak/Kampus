
@using Kampus.Models
@model Kampus.Models.TaskModel
@{
    ViewBag.Title = "Tasks";
    List<TaskModel> tasks = ViewBag.CurrentUser.Tasks;
    UserModel user = ViewBag.CurrentUser;
    SearchTaskModel search = ViewBag.SearchTask;
}


<html>
<head>
    <link rel="SHORTCUT ICON" href="~/Images/favicon.png" type="image/x-icon"/> <title>Мої завдання</title>

    <link rel="stylesheet" href="../../Content/null_style.css"/>
    <link rel="stylesheet" href="~/Content/attach_style.css" />
    <link rel="stylesheet" href="../../Content/tasks_style.css"/>
    <link rel="stylesheet" href="../../Content/notifications_style.css" />
    <link rel="stylesheet" href="~/Content/toolbar_style.css" />

    @Scripts.Render("~/bundles/jquery")

    <script src="~/Scripts/knockout-3.4.0.js"></script>
    <script src="~/Scripts/My/notification.js"></script>

    <script>
    var koViewModel;

    $(document).ready(function () {
        function ViewModel(tasks, comments, executives, attach, images) {
            self = this;
            self.newTasks = ko.observableArray(tasks);
            self.newTaskComments = ko.observableArray(comments);
            self.taskExecutives = ko.observableArray(executives);
            self.attachments = ko.observableArray(attach);
            self.attachmentsImages = ko.observableArray(images);

            self.getTaskComments = function (Id) {
                console.log(Id);
                console.log(ko.utils.arrayFilter(koViewModel.newTaskComments(), function (item) { return item.Id === Id }));
                return ko.utils.arrayFilter(koViewModel.newTaskComments(), function (item) { return item.Id === Id }).Comments;
            }
            self.getTaskExecutive = function (Id) {
                console.log(Id);
                console.log(ko.utils.arrayFilter(koViewModel.taskExecutives(), function (item) { return item.Id === Id }));
                return ko.utils.arrayFilter(koViewModel.taskExecutives(), function (item) { return item.Id === Id }).Executive;
            }

            self.addChild = function (obj) {
                self.newTasks.unshift(obj);
            };
            self.addNewAttachment = function (obj) {
                self.attachments.push(obj);
            };
            self.addNewAttachImage = function (obj) {
                self.attachmentsImages.push(obj);
            }
            self.addNewTaskComment = function (obj) {
                self.newTaskComments.push(obj);
                console.log(self.newTaskComments());
            }
            self.addTaskExecutive = function (obj) {
                self.taskExecutives.push(obj);
                console.log(self.taskExecutives());
            }

            self.clearAttachments = function () {
                self.attachments = [];
            }
            self.clearAttachImages = function () {
                self.attachmentsImages = [];
            }
            koViewModel = self;
        }
        if ($('#aside').height() < $('#main').height() + 50) {
            $('#aside').height($('#main').height() + 80);
            $('#aside').css("background", "#e7e7e7");
        }

        $('#toolbar').css("position", "fixed");
        $('#toolbar').css("z-index", "1000");


        $("#maincreateheader").click(function () {
            $("#maininputmsg").slideToggle("slow");
           
        });

        $.ajax('@Url.Content("~/Templates/task.html")', { async: false })
            .success(function (stream) {
                $('#templateTask').html(stream);
            }
        );

        $.ajax('@Url.Content("~/Templates/task_comment.html")', { async: false })
            .success(function (stream) {
                $('#templateTaskComment').html(stream);
            }
        );
        $.ajax('@Url.Content("~/Templates/task_executive.html")', { async: false })
           .success(function (stream) {
               $('#templateExecutive').html(stream);
           }
       );
        $.ajax('@Url.Content("~/Templates/attachment_file.html")', { async: false })
           .success(function (stream) {
               $('#templateAttachments').html(stream);
           }
       );

        $.ajax('@Url.Content("~/Templates/attachment_image.html")', { async: false })
          .success(function (stream) {
              $('#templateImages').html(stream);
          }
        );
        koViewModel = new ViewModel([], [], [], [], []);
        ko.applyBindings(koViewModel);
        
        $(document.body).on('click', '.taskcomments', function () {
            $(this).parents('.task').children('.taskcommentshid').slideToggle("slow", function () { });
            var postthis = $(this);
            var count = $(this).parents('.task').find('.taskcount')[0];
            var appenddiv = $(this).parents('.task').find('.taskcommentscontentc')[0];

            setInterval(function () {
                var _postid = postthis.parents('.task').find('.taskid').val();
                var _postcommentid = postthis.parents('.task').find('.taskcommentid').last().val();

                $.get('@Url.Action("GetNewTaskComments", "Home")', { taskid: _postid, taskcommentid: _postcommentid }).done(function (data) {
                    var list = JSON.parse(data);

                    if (list.length > 0) {
                        for (var i = 0; i < list.length; i++) {
                            koViewModel.addNewTaskComment({ Id: _postid, Comments: list[i] });
                        }

                        var value = parseInt($(count).text());

                        $(count).text(value + list.length);
                    }
                });
            }, 3000);

           
        });

        $(document.body).on('click', '.taskdeleteimg', function () {
            var val1 = $(this).parents(".task").find('.taskid')[0].value;
            var postthis = $(this);
            $.post('@Url.Action("RemoveTask", "Home")', { taskid: val1 }, function (data) {
                postthis.parents(".task").remove();
            });
        });

        $(document.body).on('click', '.tasksubscribe', function () {
            var val1 = $(this).parents(".task").find('.taskid')[0].value;
            var postthis = $(this);
            $.post('@Url.Action("CheckTaskAsSolved", "Home")', { taskid: val1 }, function (data) {
                var val = JSON.parse(data);
                postthis.find('img').attr("src", "../../Images/solved.png");
                
                //alert(val.Id);
                
                if (val.Id != -1) {
                    window.location.replace("/Tasks/ExecutionReview?taskid=" + val1);
                }
            });
        });

        $(document.body).on('click', '.tasklikes', function () {
            var val1 = $(this).parents(".task").find('.taskid')[0].value;
            var postthis = $(this);
            $.post('@Url.Action("LikeTask", "Home")', { taskid: val1 }, function (data) {
                var count = parseInt(postthis.children().first().text());

                if (data == 0)
                    postthis.children().first().text(count - 1);
                else {
                    postthis.children().first().text(count + 1);
                }
            });
        });

        $(document.body).on('click', '.checkasmainexecutive', function () {
            var _taskid = $(this).parents(".task").find('.taskid')[0].value;
            var _username = $(this).parents(".tasksubscriber").find(".tasksubscribersuser").text();
            var parent = $(this).parents(".tasksubscriber");
            var div = $(this).parents(".taskcommentshid");
            var subscribers = $(div).children(".tasksubscribers");
            var postthis = $(this);
            $.post('@Url.Action("CheckAsTaskMainExecutive", "Home")', { taskid: _taskid, username: _username }, function (data) {
                if ($(parent).children('.tasksubscriber').length < 2)
                    $(parent).parent().parent().remove();
                else
                    $(parent).remove();

                var val = JSON.parse(data);

                koViewModel.addTaskExecutive({ Id: _taskid, Executive: val });
            });
        });

        $(document.body).on('click', '.uncheckasmainexecutive', function () {
            var _taskid = $(this).parents(".task").find('.taskid')[0].value;

            var parent = $(this).parents(".taskexecutive");
            var postthis = $(this);

            $.post('@Url.Action("RemoveTaskExecutive", "Home")', { taskid: _taskid }, function (data) {
                $(parent).remove();
            });
        });

        $(document.body).on('click', '.maininputcommentsend', function () {
            var val1 = $(this).parents('.task').find('.taskid')[0].value;
            var text1 = $(this).parent().children('.maininputcommentinput').val();
            var count = $(this).parents('.task').find('.taskcount')[0];
            var postthis = $(this);

            $.post('@Url.Action("WriteTaskComment", "Home")', { taskid: val1, text: text1 }, function (data) {

                console.log({ Id: val1, Comments: JSON.parse(data) });

                for (var i = 0; i < koViewModel.newTasks.length; i++) {
                    if (koViewModel.newTasks[i].Id == val1)
                    {
                        koViewModel.newTasks[i].Comments.splice(koViewModel.newTasks[i].Comments.length - 1, 0, JSON.parse(data));
                    }
                }

                koViewModel.addNewTaskComment({ Id: val1, Comments: JSON.parse(data) });

                var value = parseInt($(count).text());

                $(count).text(value + 1);
                $(text1).text('');
               
            });
        });

        $(".maininputaddfile").click(function () {
            $("#maininputmsgfilesin").trigger("click");
        });

        $(".maininputaddphoto").click(function () {
            $("#maininputmsgfilesin").trigger("click");
        });

        $("#maininputmsgfilesin").change(function () {
            var _formData = new FormData();
            var files = $("#maininputmsgfilesin").get(0).files;
            for (var i = 0; i < files.length; i++) {
                _formData.append("FileUpload", files[i]);
            }

            $.ajax({
                type: "POST",
                url: '@Url.Action("UploadFileTask", "Home")',
                data: _formData,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function () {
                    var fileName = files[files.length - 1].name;
                    var lastIndexOfDot = fileName.lastIndexOf('.');
                    var extension = fileName.slice(lastIndexOfDot, fileName.length);

                    if (extension.localeCompare('.jpg') == 0) {
                        koViewModel.addNewAttachImage({ FileName: files[files.length - 1].name, Path: URL.createObjectURL(files[files.length - 1]).toLocaleString() });
                    }
                    else {
                        koViewModel.addNewAttachment({ FileName: files[files.length - 1].name, Path: URL.createObjectURL(files[files.length - 1]).toLocaleString() });
                        console.log(files[files.length - 1].name);
                    }
                },
                error: function (error) {
                    alert("Error while uploading file!");
                }
            });
        });

        $('#searchcategory').find("select").change(function () {

            var Name = "";
            $(this).find("option:selected").each(function () {
                Name = $(this).text();
            });


            $.get('@Url.Action("GetSubcategories", "Home")', { name: Name }).done(function (data) {

                var string = "";


                var list = JSON.parse(data);


                for (var i = 0; i < list.length; i++) {
                    console.log(i);
                    console.log(list[i]);
                    console.log(list[i].Id);
                    console.log(list[i].Name);
                    string += '<option value="' + list[i].Id + '">' + list[i].Name + '</option>';
                }

                string += '<option value=""></option>';

                console.log(string);

                $('#searchsubcategory').find("select").html(string);
            });

        });
        $("#Category").change(function () {

            var Name = "";
            $("#Category option:selected").each(function () {
                Name = $(this).text();
            });


            $.get('@Url.Action("GetSubcategories", "Home")', { name: Name }).done(function (data) {

                var string = "";

                //alert(data);

                var list = JSON.parse(data);


                for (var i = 0; i < list.length; i++) {
                    console.log(i);
                    console.log(list[i]);
                    console.log(list[i].Id);
                    console.log(list[i].Name);
                    string += '<option value="' + list[i].Id + '">' + list[i].Name + '</option>';
                }

                console.log(string);

                $('#Subcategory').html(string);
            });

        });

        $("#btnSubmitTask").click(function () {
            var _header = $("#inputSignInName").val();
            var _price = $("#inputSignInPrice").val();
            var _content = $("#inputSignInContent").val();
            var _category = $("#category > select").val();
            var _subcategory = $("#subcategory > select").val();


            $.post('@Url.Action("CreateTask")', {
                header: _header,
                price: _price,
                content: _content,
                category: _category,
                subcategory: _subcategory
            },
            function (json) {
                var data = JSON.parse(json);
                console.log(data);
                koViewModel.addChild(data);
                koViewModel.clearAttachments();
                koViewModel.clearAttachImages();
                $('#maininputmsgfilesin').val([]);
                console.log($('#maininputmsgfilesin').val());

                $("#inputSignInName").val("");
                $("#inputSignInPrice").val("");
                $("#inputSignInContent").val("");

                $('#taskFiles').find('.filerefcont').remove();
                $('#taskImages').find('.attachImg').remove();


               
            });
        });



        notifications_init();
    });
</script>
</head>
<body>
    @Html.Partial("Toolbar")
<div id="wrapper">
<div id="aside">
    <div id="tasksearchform">
        @using (Html.BeginForm("SearchTasks", "Home", FormMethod.Get))
        {
            <input type="text" class="inputSignIn" id="searchrequest"
                   value="@(search.Request ?? "")" name="request" placeholder="Пошук"/>

            <div class="searchheader">Категорія</div>
            <div class="slate" id="searchcategory" title="Категорія">
                <select name="category">
                    <option value="-1"></option>
                    @if (search.CategoryId == null)
                    {
                        foreach (TaskCategoryModel category in ViewBag.TaskCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                    else
                    {
                        foreach (TaskCategoryModel category in ViewBag.TaskCategories)
                        {
                            if (category.Id == search.CategoryId)
                            {
                                <option value="@category.Id" selected>@category.Name</option>
                            }
                            else
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    }
                </select>
            </div>
            <div class="searchheader">Підкатегорія</div>
            <div class="slate" id="searchsubcategory" title="Підкатегорія">
                <select name="subcategory">
                    <option value="-1"></option>
                    @if (search.SubcategoryId == null)
                    {
                        foreach (TaskSubcatModel category in ViewBag.TaskSubcategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                    else
                    {
                        foreach (TaskSubcatModel category in ViewBag.TaskSubcategories)
                        {
                            if (category.Id == search.SubcategoryId)
                            {
                                <option value="@category.Id" selected>@category.Name</option>
                            }
                            else
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        }
                    }
                </select>
            </div>

            <a class="searchlinkbtn" href="@Url.Action("Categories", "Tasks")">
                <div style="margin-top: 30px;">Пошук за категоріями</div>
            </a>
            <div class="searchheader">Ціна</div>
            <div>
                <input type="number" name="minprice" class="inputSignIn"
                       value="@(search.MinPrice == null ? "" : search.MinPrice.Value.ToString())"
                       id="searchminprice" title="Мінімальна ціна"/>
                <input type="number" name="maxprice" class="inputSignIn"
                       value="@(search.MaxPrice == null ? "" : search.MaxPrice.Value.ToString())"
                       id="searchmaxprice" title="Максимальна ціна"/>
            </div>

            <a class="searchlinkbtn" href="@Url.Action("SearchTasks", "Home", new {subscribed = 1})">
                <div>Завдання на які ви підписані</div></a>
            <br>
            <a class="searchlinkbtn" href="@Url.Action("SearchTasks", "Home", new {executive = 1})">
                <div>Завдання які ви виконуєте</div>
            </a>
            <br>
            <a class="searchlinkbtn" href="@Url.Action("SearchTasks", "Home", new {solved = 1})">
                <div>Виконані завдання</div>
            </a>
            <br>
            <input type="submit" class="nextstepsearch" value="Пошук"/>
        }
    </div>
</div>

<div id="main">
    <div id="mainheader">Завдання</div>

    <div id="tasks">
        <div id="newTasks" data-bind="template: {name: 'task-template', foreach: newTasks}">

        </div>
        @foreach (TaskModel taskModel in tasks)
        {
            <div class="task">
                <div class="taskheader">
                    <div class="taskheadercontent">
                        <div class="taskcat"><span class="taskcategory"> <span class="catSym">@@</span>@taskModel.CategoryName </span> <span class="taskcategory"><span class="catSym">@@</span>@taskModel.SubcategoryName</span></div>

                        <div class="taskprice">@(taskModel.Price != null ? taskModel.Price.ToString() + " грн." : "" )</div>

                        <div><a href="@Url.Action("Id", "Tasks", new {id = taskModel.Id})" class="taskheadercontenttext">@taskModel.Header</a>
                        </div>
                    </div>
                </div>
                <div class="taskcommentshid">
                    @if (taskModel.Attachments != null) { 
                        if (taskModel.Attachments.Any(p => p.IsImage))
                        {
                            foreach (var image in taskModel.Attachments.Where(p => p.IsImage))
                            {
                                <img class="attachImg" src="/Files/@image.RealFileName" />
                            }
                        }
                    }
                    
                    <div class="taskcontent">@taskModel.Content</div>
                    @if (taskModel.Attachments != null) {
                        if (taskModel.Attachments.Any(p => !p.IsImage))
                        {
                            <div class="filerefs">
                                @foreach (var link in taskModel.Attachments.Where(p => !p.IsImage))
                                {
                                    <div class="filerefcont">
                                        <img src="~/Images/round/attachment.png" /> @Html.ActionLink(link.FileName,
                                                        "Download", "Download", new { path = link.RealFileName, fileName = link.FileName },
                                                        new { @class = "fileref" })
                                    </div>
                                }
                            </div>
                        }
                    }

                    <div class="tasksubscribers">

                        @if (taskModel.Subscribers.Any())
                        {
                            <span class="tasksubscribersheader">Підписники </span>
                            <div>
                                @foreach (var sub in taskModel.Subscribers)
                                {
                                    <div class="tasksubscriber">
                                        <a style="text-decoration: none;" href="@Url.Action("Id", "Profile", new {Id = sub.User.Id})"><span class="tasksubscribersuser">@@@sub.User.Username @(sub.Price == null || sub.Price == 0 ? "" : sub.Price.ToString() + " грн.")</span></a>
                                        @if (taskModel.Executive == null)
                                        {
                                            <img title="Поставити виконавцем" class="checkasmainexecutive" src="@Url.Content("../../Images/yes.png")"/>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    
                    
                    @if (taskModel.Executive != null)
                    {
                       
                        <div class="taskexecutive">
                            <span class="tasksubscribersheader">Виконавець: </span>
                            <div>
                                <a style="text-decoration: none;" href="@Url.Action("Id", "Profile", new {Id = taskModel.Executive.Id})"><span class="tasksubscribersuser">@@@taskModel.Executive.Username </span></a>
                                <img title="Видалити виконавця" class="uncheckasmainexecutive" src="@Url.Content("../../Images/remove.png")"/>
                            </div>
                        </div>
                    }
                    <div class="taskexecutivecont" data-bind="foreach: taskExecutives">
                        <div data-bind="if: Id == @taskModel.Id">
                            <div data-bind="template: { name: 'task-executive-template'}"></div>
                        </div>
                    </div>
                    <div class="taskcommentscontent">
                        <div class="taskcommentscontentc">
                            @if (taskModel.Comments.Count > 0)
                            {
                                foreach (var comment in taskModel.Comments)
                                {
                                    <div class="taskcomment">
                                        <div class="taskcommentcontent">
                                            <div class="taskcommentcontenttext">
                                                @comment.Content
                                            </div>
                                        </div>
                                        <div class="taskcommenttriangle"></div>
                                        <div class="taskcommentcreator">@@@comment.User.Username</div>
                                        <div>
                                            <input class="taskcommentid" type="hidden" value="@comment.Id"/>
                                        </div>
                                    </div>
                                }
                            }
                            <div data-bind="foreach: newTaskComments">
                                <div data-bind="if: Id == @taskModel.Id">
                                    <div data-bind="template: { name: 'task-comment-template'}"></div>
                                </div>

                            </div>
                        </div>
                        <div class="maininputcomment">
                            <div class="maininputcommentcontent">
                                <textarea name="text" class="maininputcommentinput"></textarea>
                                <input type="button" value="Відправити" class="maininputcommentsend"/>
                            </div>
                            <div class="maininputcommenttriangle"></div>
                        </div>
                    </div>
                </div>
                <div class="tasktriangle"></div>
                <div class="taskunder">
                    <div class="taskcreator">@@@taskModel.Creator.Username</div>

                    @if (taskModel.Solved == true)
                    {
                        <div class="tasksubscribe1">
                            <img title="Завдання виконано" class="tasksubscribeimg" src="../../Images/solved.png" width="28"/>
                        </div>
                    }
                    else
                    {
                        <div class="tasksubscribe">
                            <img title="Позначити виконаним" class="tasksubscribeimg" src="../../Images/subscribe_to_task.png" width="28"/>
                        </div>
                    }


                    <div class="taskcomments">
                        <span class="taskcount">@taskModel.Comments.Count</span> <img src="../../Images/comments.png" align="middle" width="28"/>
                    </div>
                    <div class="tasklikes">
                        <span class="taskcount">@taskModel.Likes.Count</span> <img src="../../Images/like.png" width="28"/>
                    </div>

                </div>
                <input type="hidden" class="taskid" value="@taskModel.Id"/>
            </div>
        }
        
    </div>

    <div id="maincreateheader">Створити завдання</div>

    <div id="maininputmsg">
        <div id="maininputmsgcontent">
            <div id="maininputmsgform">
                @*@using (Html.BeginForm("CreateTask", "Home", FormMethod.Post))
                {
                    @Html.ValidationSummary(true)

                    @Html.AntiForgeryToken()*@

                    <div id="taskImages" data-bind="template: { name: 'attachment-image' , foreach: attachmentsImages }">
                    </div>

                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Header, new {id = "inputSignInName", @class = "inputSignIn", placeholder = "Заголовок", type = "text"})
                        @Html.ValidationMessageFor(model => model.Header)
                    </div>

                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Price, new {id = "inputSignInPrice", @class = "inputSignIn", placeholder = "Ціна", type = "number"})
                        @Html.ValidationMessageFor(model => model.Price)
                    </div>

                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.Content, new {id = "inputSignInContent", @class = "inputSignIn", placeholder = "Вміст"})
                        @Html.ValidationMessageFor(model => model.Content)
                    </div>

                    <div class="editor-field">
                        <div class="editor-field">
                            <div class="slate" id="category">
                                @Html.DropDownListFor(model => model.Category, new SelectList(ViewBag.TaskCategories as System.Collections.IEnumerable, "Id", "Name"))
                                @Html.ValidationMessageFor(model => model.Category)
                            </div>
                        </div>
                    </div>

                    <div class="editor-field">
                        <div class="editor-field">
                            <div class="slate" id="subcategory">
                                @Html.DropDownListFor(model => model.Subcategory, new SelectList(ViewBag.TaskSubcategories as System.Collections.IEnumerable, "Id", "Name"))
                                @Html.ValidationMessageFor(model => model.Subcategory)
                            </div>
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.Solved, new {value = false})

                    <div id="taskFiles" data-bind="template: { name: 'attachment-file', foreach: attachments }">
                    </div>

                    <input id="maininputmsgfilesin"
                       type="file" name="file" multiple />

                    <input id="btnSubmitTask" type="submit" class="nextstep" value="Створити"/>
                @*}*@
            </div>
        </div>
        
        <div id="maininputmsgtriangle"></div>
        <div id="addfilesimg">
            <img class="maininputaddphoto" src="~/Images/add_photo.png" />
            <img class="maininputaddfile" src="~/Images/add_file.png" />
        </div>
    </div>
    <div id="templateTask"></div>
    <div id="templateTaskComment"></div>
    <div id="templateExecutive"></div>
    <div id="templateAttachments"></div>
    <div id="templateImages"></div>
</div>
</div>
</body>
</html>
